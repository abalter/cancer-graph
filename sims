---
title: "VisNetwork Test"
author: "Ariel Balter"
---

# Introduction to visNetwork {#introduction-to-visnetwork .title .toc-ignore}

#### B. Thieurmel - DataStorm {#b.-thieurmel---datastorm .author}

#### 2021-09-29 {#section .date}

**visNetwork** is a R package for network visualization, using

```{r}
library(visNetwork, quietly = TRUE)
```

## Minimal example


-   a nodes data.frame, with *id* column
-   a edges data.frame, with *from* and *to* columns

```{r}
# javascript api
visDocumentation()
vignette("Introduction-to-visNetwork") # with CRAN version
# shiny examples
```


## Simple individual nodes and edges customization

-   Adding more variables on nodes data.frame. See ***visNodes*** for
    available options.

```{r}
nodes = data.frame(
  id = 1:10,
  label = paste("Node", 1:10),
  # add labels on nodes
  group = c("GrA", "GrB"),
  # add groups on nodes
  value = 1:10,
  # size adding value
  shape = c(
    "square",
    "triangle",
    "box",
    "circle",
    "dot",
    "star",
    "ellipse",
    "database",
    "text",
    "diamond"
  ),
  # control shape of nodes
  title = paste0("<p><b>", 1:10, "</b><br>Node !</p>"),
  # tooltip (html or character)
  color = c("darkred", "grey", "orange", "darkblue", "purple"),
  # color
  shadow = c(FALSE, TRUE, FALSE, TRUE, TRUE)
) # shadow

head(nodes)
```


-   Adding more variables on edges data.frame. See ***visEdges*** for
    available options.

```{r}
edges = data.frame(
  from = sample(1:10, 8),
  to = sample(1:10, 8),
  label = paste("Edge", 1:8),
  # add labels on edges
  length = c(100, 500),
  # length
  arrows = c("to", "from", "middle", "middle;to"),
  # arrows
  dashes = c(TRUE, FALSE),
  # dashes
  title = paste("Edge", 1:8),
  # tooltip (html or character)
  smooth = c(FALSE, TRUE),
  # smooth
  shadow = c(FALSE, TRUE, FALSE, TRUE)
) # shadow
head(edges)
```


```{r}
visNetwork(nodes, edges, width = "100%")
```


## Global nodes/edges configuration

-   Set global options for nodes and edges using ***visNodes*** and
    ***visEdges***, and use options per group using ***visGroups***.

```{r}
edges = data.frame(from = c(2, 5, 3, 3), to = c(1, 2, 4, 2))

visNetwork(nodes, edges, width = "100%") %>%
  visNodes(shape = "square") %>% # square for all nodes
  visEdges(arrows = "to") %>% # arrow "to" for all edges
  visGroups(groupname = "A", color = "darkblue") %>% # darkblue for group "A"
  visGroups(groupname = "B", color = "red") # red for group "B"
```


# Network configuration

Configuration options are available in *visOptions*, *visInteraction*,

## Example Data

```{r}
nb = 10
nodes = data.frame(
  id = 1:nb, label = paste("Label", 1:nb),
  group = sample(LETTERS[1:3], nb, replace = TRUE), value = 1:nb,
  title = paste0("<p>", 1:nb, "<br>Tooltip !</p>"), stringsAsFactors = FALSE
)

edges = data.frame(
  from = trunc(runif(nb) * (nb - 1)) + 1,
  to = trunc(runif(nb) * (nb - 1)) + 1,
  value = rnorm(nb, 10), label = paste("Edge", 1:nb),
  title = paste0("<p>", 1:nb, "<br>Edge Tooltip !</p>")
)
```

## Add legend

It's possible to add more custom legend on nodes / edges ! Default on

```{r}
visNetwork(nodes, edges, width = "100%") %>% visLegend()
```



```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visLegend(
    useGroups = FALSE, addNodes = data.frame(label = "Nodes", shape = "circle"),
    addEdges = data.frame(label = "link", color = "black")
  )
```


## Highlight nearest

You can highlight nearest nodes and edges clicking on a node with

```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visOptions(highlightNearest = TRUE)
```


It's now possible to control the degree of depth (visNetwork \>= 0.1.2)

```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visOptions(highlightNearest = list(enabled = TRUE, degree = 2))
```


## Select by node id

You can also select nodes by id/label with a list with

```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)
```


## Select by a column

And select some nodes by the values of a column using **selectedBy**

```{r}
# can be the column you want
nodes$sel = sample(c("sel1", "sel2"), nrow(nodes), replace = TRUE)
visNetwork(nodes, edges, width = "100%") %>%
  visOptions(selectedBy = "sel")
```


## Directed Network

```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visEdges(arrows = "from")
```


## Custom navigation


```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visInteraction(navigationButtons = TRUE)
```


## Data Manipulation


```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visOptions(manipulation = TRUE)
```


## Hierarchical Layout

You can use and control hierarchical layout with *visHierarchicalLayout*

```{r}

edges = data.frame(
  from = c(1, 2, 2, 2, 3, 3),
  to = c(2, 3, 4, 5, 6, 7)
)
```

```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visEdges(arrows = "from") %>%
  visHierarchicalLayout()
```


```{r}
# same as   visLayout(hierarchical = TRUE)

visNetwork(nodes, edges, width = "100%") %>%
  visEdges(arrows = "from") %>%
  visHierarchicalLayout(direction = "LR")
```


## Freeze network

```{r}
visNetwork(nodes, edges, width = "100%") %>%
  visInteraction(dragNodes = FALSE, dragView = FALSE, zoomView = FALSE)
```


# Additional features

## Use font awesome icons in your network

You can use **Font Awesome** icons using groups or nodes options. **Font
dependencies. use addFontAwesome() if needed.

```{r}
# don't run here
edges = data.frame(from = c(1, 2), to = c(2, 3))

visNetwork(nodes, edges, width = "100%") %>%
  visGroups(groupname = "A", shape = "icon", icon = list(code = "f0c0", size = 75)) %>%
  visGroups(groupname = "B", shape = "icon", icon = list(code = "f007", color = "red")) %>%
  visLegend() %>%
  addFontAwesome()
```

## Visualize rpart object

New *visTree* function allows to visualize and customize a *rpart*
classification and regression tree. Have a look to *visTreeEditor* to
edity and get back network, or to *visTreeModuleServer* to use custom
tree module in R.

```{r}
library(rpart)
# Complex tree
data("solder")
res =
  rpart(Opening ~ ., data = solder, control = rpart.control(cp = 0.00005))
visTree(
  res,
  height = "800px",
  nodesPopSize = TRUE,
  minNodeSize = 10,
  maxNodeSize = 30
)
```


## Use in Shiny

With *visNetworkOutput* and *renderVisNetwork*. Using with shiny, and
enabled options *nodesIdSelection*, you can access to new input with
current selection value. Morevoer, you can do a lot of things with
*visNetworkProxy*

```{r}
# output$mynetwork =
#   renderVisNetwork({
#     ... visOptions(nodesIdSelection = TRUE)
#   }) # created input$mynetwork_selected
```

And with *selectedBy*, new input **input\$mynetwork_selectedBy**.

## Physics, tooltip, events,



## Export

```{r}
network = visNetwork(nodes, edges, width = "100%")
visSave(network, file = "network.html")
```

## Use DOT language data

```{r}
visNetwork(dot = "dinetwork {1 -> 1 -> 2; 2 -> 3; 2 -- 4; 2 -> 1 }", width = "100%")
```


## Use gephi json export file

```{}
# don't run here
visNetwork(gephi = 'WorldCup2014.json')
```


